/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ASRegistryInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "getAS(bytes32)": FunctionFragment;
    "getASCount()": FunctionFragment;
    "register(bytes,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAS", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getASCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getASCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {
    "Registered(bytes32,uint256,bytes,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
}

export class ASRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ASRegistryInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    getAS(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, string] & {
          uuid: string;
          verifier: string;
          index: BigNumber;
          schema: string;
        }
      ]
    >;

    getASCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    register(
      schema: BytesLike,
      verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  getAS(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      uuid: string;
      verifier: string;
      index: BigNumber;
      schema: string;
    }
  >;

  getASCount(overrides?: CallOverrides): Promise<BigNumber>;

  register(
    schema: BytesLike,
    verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    getAS(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        uuid: string;
        verifier: string;
        index: BigNumber;
        schema: string;
      }
    >;

    getASCount(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      schema: BytesLike,
      verifier: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Registered(
      uuid?: BytesLike | null,
      index?: BigNumberish | null,
      schema?: null,
      verifier?: null,
      attester?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, string],
      {
        uuid: string;
        index: BigNumber;
        schema: string;
        verifier: string;
        attester: string;
      }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    getAS(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getASCount(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      schema: BytesLike,
      verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAS(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getASCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      schema: BytesLike,
      verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
