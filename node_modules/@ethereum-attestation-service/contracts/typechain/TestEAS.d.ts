/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestEASInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "attest(address,bytes32,uint256,bytes32,bytes)": FunctionFragment;
    "attestByDelegation(address,bytes32,uint256,bytes32,bytes,address,uint8,bytes32,bytes32)": FunctionFragment;
    "getASRegistry()": FunctionFragment;
    "getAttestation(bytes32)": FunctionFragment;
    "getAttestationsCount()": FunctionFragment;
    "getEIP712Verifier()": FunctionFragment;
    "getLastUUID()": FunctionFragment;
    "getReceivedAttestationUUIDs(address,bytes32,uint256,uint256,bool)": FunctionFragment;
    "getReceivedAttestationUUIDsCount(address,bytes32)": FunctionFragment;
    "getRelatedAttestationUUIDs(bytes32,uint256,uint256,bool)": FunctionFragment;
    "getRelatedAttestationUUIDsCount(bytes32)": FunctionFragment;
    "getSentAttestationUUIDs(address,bytes32,uint256,uint256,bool)": FunctionFragment;
    "getSentAttestationUUIDsCount(address,bytes32)": FunctionFragment;
    "isAttestationValid(bytes32)": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "revokeByDelegation(bytes32,address,uint8,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attest",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attestByDelegation",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getASRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEIP712Verifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReceivedAttestationUUIDs",
    values: [string, BytesLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceivedAttestationUUIDsCount",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelatedAttestationUUIDs",
    values: [BytesLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelatedAttestationUUIDsCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSentAttestationUUIDs",
    values: [string, BytesLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSentAttestationUUIDsCount",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestationValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "revokeByDelegation",
    values: [BytesLike, string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getASRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEIP712Verifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceivedAttestationUUIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceivedAttestationUUIDsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelatedAttestationUUIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelatedAttestationUUIDsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSentAttestationUUIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSentAttestationUUIDsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAttestationValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeByDelegation",
    data: BytesLike
  ): Result;

  events: {
    "Attested(address,address,bytes32,bytes32)": EventFragment;
    "Revoked(address,address,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export class TestEAS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestEASInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    attest(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attestByDelegation(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getASRegistry(overrides?: CallOverrides): Promise<[string]>;

    getAttestation(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          uuid: string;
          schema: string;
          recipient: string;
          attester: string;
          time: BigNumber;
          expirationTime: BigNumber;
          revocationTime: BigNumber;
          refUUID: string;
          data: string;
        }
      ]
    >;

    getAttestationsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<[string]>;

    getLastUUID(overrides?: CallOverrides): Promise<[string]>;

    getReceivedAttestationUUIDs(
      recipient: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getReceivedAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRelatedAttestationUUIDs(
      uuid: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRelatedAttestationUUIDsCount(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSentAttestationUUIDs(
      attester: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSentAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAttestationValid(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revoke(
      uuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeByDelegation(
      uuid: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  attest(
    recipient: string,
    schema: BytesLike,
    expirationTime: BigNumberish,
    refUUID: BytesLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attestByDelegation(
    recipient: string,
    schema: BytesLike,
    expirationTime: BigNumberish,
    refUUID: BytesLike,
    data: BytesLike,
    attester: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getASRegistry(overrides?: CallOverrides): Promise<string>;

  getAttestation(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      uuid: string;
      schema: string;
      recipient: string;
      attester: string;
      time: BigNumber;
      expirationTime: BigNumber;
      revocationTime: BigNumber;
      refUUID: string;
      data: string;
    }
  >;

  getAttestationsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getEIP712Verifier(overrides?: CallOverrides): Promise<string>;

  getLastUUID(overrides?: CallOverrides): Promise<string>;

  getReceivedAttestationUUIDs(
    recipient: string,
    schema: BytesLike,
    start: BigNumberish,
    length: BigNumberish,
    reverseOrder: boolean,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getReceivedAttestationUUIDsCount(
    recipient: string,
    schema: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRelatedAttestationUUIDs(
    uuid: BytesLike,
    start: BigNumberish,
    length: BigNumberish,
    reverseOrder: boolean,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRelatedAttestationUUIDsCount(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSentAttestationUUIDs(
    attester: string,
    schema: BytesLike,
    start: BigNumberish,
    length: BigNumberish,
    reverseOrder: boolean,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSentAttestationUUIDsCount(
    recipient: string,
    schema: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAttestationValid(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revoke(
    uuid: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeByDelegation(
    uuid: BytesLike,
    attester: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    attest(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    attestByDelegation(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getASRegistry(overrides?: CallOverrides): Promise<string>;

    getAttestation(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        uuid: string;
        schema: string;
        recipient: string;
        attester: string;
        time: BigNumber;
        expirationTime: BigNumber;
        revocationTime: BigNumber;
        refUUID: string;
        data: string;
      }
    >;

    getAttestationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<string>;

    getLastUUID(overrides?: CallOverrides): Promise<string>;

    getReceivedAttestationUUIDs(
      recipient: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getReceivedAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelatedAttestationUUIDs(
      uuid: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRelatedAttestationUUIDsCount(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSentAttestationUUIDs(
      attester: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSentAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAttestationValid(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revoke(uuid: BytesLike, overrides?: CallOverrides): Promise<void>;

    revokeByDelegation(
      uuid: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Attested(
      recipient?: string | null,
      attester?: string | null,
      uuid?: BytesLike | null,
      schema?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { recipient: string; attester: string; uuid: string; schema: string }
    >;

    Revoked(
      recipient?: string | null,
      attester?: string | null,
      uuid?: BytesLike | null,
      schema?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { recipient: string; attester: string; uuid: string; schema: string }
    >;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    attest(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attestByDelegation(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getASRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getAttestation(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttestationsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<BigNumber>;

    getLastUUID(overrides?: CallOverrides): Promise<BigNumber>;

    getReceivedAttestationUUIDs(
      recipient: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceivedAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelatedAttestationUUIDs(
      uuid: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelatedAttestationUUIDsCount(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSentAttestationUUIDs(
      attester: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSentAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAttestationValid(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      uuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeByDelegation(
      uuid: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attest(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attestByDelegation(
      recipient: string,
      schema: BytesLike,
      expirationTime: BigNumberish,
      refUUID: BytesLike,
      data: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getASRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAttestation(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttestationsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReceivedAttestationUUIDs(
      recipient: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceivedAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelatedAttestationUUIDs(
      uuid: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelatedAttestationUUIDsCount(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSentAttestationUUIDs(
      attester: string,
      schema: BytesLike,
      start: BigNumberish,
      length: BigNumberish,
      reverseOrder: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSentAttestationUUIDsCount(
      recipient: string,
      schema: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAttestationValid(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revoke(
      uuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeByDelegation(
      uuid: BytesLike,
      attester: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
