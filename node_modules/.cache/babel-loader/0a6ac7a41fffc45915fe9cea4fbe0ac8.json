{"ast":null,"code":"import React, { useRef, useEffect, memo } from 'react';\n\nasync function type(node, ...args) {\n  for (const arg of args) {\n    switch (typeof arg) {\n      case 'string':\n        await edit(node, arg);\n        break;\n\n      case 'number':\n        await wait(arg);\n        break;\n\n      case 'function':\n        await arg(node, ...args);\n        break;\n\n      default:\n        await arg;\n    }\n  }\n}\n\nasync function edit(node, text) {\n  const overlap = getOverlap(node.textContent, text);\n  await perform(node, [...deleter(node.textContent, overlap), ...writer(text, overlap)]);\n}\n\nasync function wait(ms) {\n  await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function perform(node, edits, speed = 60) {\n  for (const op of editor(edits)) {\n    op(node);\n    await wait(speed + speed * (Math.random() - 0.5));\n  }\n}\n\nfunction* editor(edits) {\n  for (const edit of edits) {\n    yield node => requestAnimationFrame(() => node.textContent = edit);\n  }\n}\n\nfunction* writer([...text], startIndex = 0, endIndex = text.length) {\n  while (startIndex < endIndex) {\n    yield text.slice(0, ++startIndex).join('');\n  }\n}\n\nfunction* deleter([...text], startIndex = 0, endIndex = text.length) {\n  while (endIndex > startIndex) {\n    yield text.slice(0, --endIndex).join('');\n  }\n}\n\nfunction getOverlap(start, [...end]) {\n  return [...start, NaN].findIndex((char, i) => end[i] !== char);\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".styles_typicalWrapper__1_Uvh::after {\\n  content: \\\"|\\\";\\n  animation: styles_blink__2CKyC 1s infinite step-start;\\n}\\n\\n@keyframes styles_blink__2CKyC {\\n  50% { opacity: 0; }\\n}\";\nvar styles = {\n  \"typicalWrapper\": \"styles_typicalWrapper__1_Uvh\",\n  \"blink\": \"styles_blink__2CKyC\"\n};\nstyleInject(css);\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Typical = function Typical(_ref) {\n  var steps = _ref.steps,\n      loop = _ref.loop,\n      className = _ref.className,\n      _ref$wrapper = _ref.wrapper,\n      wrapper = _ref$wrapper === undefined ? \"p\" : _ref$wrapper;\n  var typicalRef = useRef(null);\n  var Component = wrapper;\n  var classNames = [styles.typicalWrapper];\n\n  if (className) {\n    classNames.unshift(className);\n  }\n\n  useEffect(function () {\n    if (loop === Infinity) {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(steps), [type]));\n    } else if (typeof loop === \"number\") {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(Array(loop).fill(steps).flat())));\n    } else {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(steps)));\n    }\n  });\n  return React.createElement(Component, {\n    ref: typicalRef,\n    className: classNames.join(' ')\n  });\n};\n\nvar index = memo(Typical);\nexport default index;","map":null,"metadata":{},"sourceType":"module"}